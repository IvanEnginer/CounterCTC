
CounterCTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000625  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000572  00000000  00000000  00000905  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038c  00000000  00000000  00000e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034c  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001601  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <main>
  74:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_7>:
//    TCCR1B = (0<<CS10)|(1<<CS11)|(0<<CS12); // Устанавливаем предделитель и разрешаем работу счетчика              
}

//обработчик прерывания по совпадению А
ISR(TIMER1_COMPA_vect)
{    
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
    switch (Step)
  8a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Step>
  8e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Step+0x1>
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	91 05       	cpc	r25, r1
  96:	f9 f0       	breq	.+62     	; 0xd6 <__vector_7+0x5a>
  98:	38 f0       	brcs	.+14     	; 0xa8 <__vector_7+0x2c>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	91 05       	cpc	r25, r1
  9e:	89 f1       	breq	.+98     	; 0x102 <__vector_7+0x86>
  a0:	03 97       	sbiw	r24, 0x03	; 3
  a2:	09 f4       	brne	.+2      	; 0xa6 <__vector_7+0x2a>
  a4:	46 c0       	rjmp	.+140    	; 0x132 <__vector_7+0xb6>
  a6:	55 c0       	rjmp	.+170    	; 0x152 <__vector_7+0xd6>
    {
        case 0:
            TCCR1B = 0;
  a8:	1e bc       	out	0x2e, r1	; 46
            TIMSK = (0<<OCIE1A);
  aa:	19 be       	out	0x39, r1	; 57
            OCR1AH = 0x00;
  ac:	1b bc       	out	0x2b, r1	; 43
            OCR1AL = 0x7F;                      
  ae:	8f e7       	ldi	r24, 0x7F	; 127
  b0:	8a bd       	out	0x2a, r24	; 42
            Step++; 
  b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Step>
  b6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Step+0x1>
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Step+0x1>
  c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Step>
            PORTB = (1<<PB0)|(0<<PB1); 
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	88 bb       	out	0x18, r24	; 24
            TCNT1H = 0;
  c8:	1d bc       	out	0x2d, r1	; 45
            TCNT1L = 0;
  ca:	1c bc       	out	0x2c, r1	; 44
            TCCR1B =(1<<CS11)|(1<<CS10);
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	8e bd       	out	0x2e, r24	; 46
            TIMSK = (1<<OCIE1A);                                    
  d0:	80 e1       	ldi	r24, 0x10	; 16
  d2:	89 bf       	out	0x39, r24	; 57
            break;
  d4:	3e c0       	rjmp	.+124    	; 0x152 <__vector_7+0xd6>
        case 1:
            TCCR1B = 0;        
  d6:	1e bc       	out	0x2e, r1	; 46
            TIMSK = (0<<OCIE1A);        
  d8:	19 be       	out	0x39, r1	; 57
            OCR1AH = 0x00;
  da:	1b bc       	out	0x2b, r1	; 43
            OCR1AL = 0x0F;  
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	8a bd       	out	0x2a, r24	; 42
            TCCR1B = (1<<CS10); 
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	8e bd       	out	0x2e, r24	; 46
            Step++;                             
  e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Step>
  e8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Step+0x1>
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Step+0x1>
  f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Step>
            PORTB = (0<<PB0)|(0<<PB1);            
  f6:	18 ba       	out	0x18, r1	; 24
            TCNT1H = 0;
  f8:	1d bc       	out	0x2d, r1	; 45
            TCNT1L = 0; 
  fa:	1c bc       	out	0x2c, r1	; 44
            TIMSK = (1<<OCIE1A);                           
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	89 bf       	out	0x39, r24	; 57
            break;  
 100:	28 c0       	rjmp	.+80     	; 0x152 <__vector_7+0xd6>
        case 2:
            TCCR1B = 0;        
 102:	1e bc       	out	0x2e, r1	; 46
            TIMSK = (0<<OCIE1A);        
 104:	19 be       	out	0x39, r1	; 57
            PORTB = (0<<PB0)|(1<<PB1);
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	88 bb       	out	0x18, r24	; 24
            TCCR1B =(1<<CS10)|(1<<CS11);            
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	8e bd       	out	0x2e, r24	; 46
            OCR1AH = 0x01;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	8b bd       	out	0x2b, r24	; 43
            OCR1AL = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	8a bd       	out	0x2a, r24	; 42
            Step++;
 116:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Step>
 11a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Step+0x1>
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Step+0x1>
 124:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Step>
            TCNT1H = 0;
 128:	1d bc       	out	0x2d, r1	; 45
            TCNT1L = 0; 
 12a:	1c bc       	out	0x2c, r1	; 44
            TIMSK = (1<<OCIE1A);                       
 12c:	80 e1       	ldi	r24, 0x10	; 16
 12e:	89 bf       	out	0x39, r24	; 57
            break;            
 130:	10 c0       	rjmp	.+32     	; 0x152 <__vector_7+0xd6>
        case 3:
            TCCR1B = 0;        
 132:	1e bc       	out	0x2e, r1	; 46
            TIMSK = (0<<OCIE1A);        
 134:	19 be       	out	0x39, r1	; 57
            OCR1AH = 0x00;
 136:	1b bc       	out	0x2b, r1	; 43
            OCR1AL = 0x0F;  
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	8a bd       	out	0x2a, r24	; 42
            TCCR1B = (1<<CS10); 
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	8e bd       	out	0x2e, r24	; 46
            Step = 0;                             
 140:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Step+0x1>
 144:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Step>
            PORTB = (0<<PB0)|(0<<PB1);            
 148:	18 ba       	out	0x18, r1	; 24
            TCNT1H = 0;
 14a:	1d bc       	out	0x2d, r1	; 45
            TCNT1L = 0; 
 14c:	1c bc       	out	0x2c, r1	; 44
            TIMSK = (1<<OCIE1A);                      
 14e:	80 e1       	ldi	r24, 0x10	; 16
 150:	89 bf       	out	0x39, r24	; 57
           break;
    }               
}
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <_Z11Chek_Buttonv>:

void Chek_Button()
{
    if (bit_is_set(PIND, PIND7))
 160:	87 9b       	sbis	0x10, 7	; 16
 162:	03 c0       	rjmp	.+6      	; 0x16a <_Z11Chek_Buttonv+0xa>
        NewState = true;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <NewState>
    if (bit_is_clear(PIND, PIND7))
 16a:	87 9b       	sbis	0x10, 7	; 16
        NewState = false;
 16c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <NewState>
    if (NewState != State)
 170:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 174:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <NewState>
 178:	98 17       	cp	r25, r24
 17a:	a9 f0       	breq	.+42     	; 0x1a6 <_Z11Chek_Buttonv+0x46>
    {
//        IRQ_Chek_button = true;
            if (State)
 17c:	88 23       	and	r24, r24
 17e:	59 f0       	breq	.+22     	; 0x196 <_Z11Chek_Buttonv+0x36>
            {
                Step = 0;
 180:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Step+0x1>
 184:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Step>
//                OCR1AH = 0x00;
//                OCR1AL = 0x0F;                
                TIMSK = (1<<OCIE1A);
 188:	80 e1       	ldi	r24, 0x10	; 16
 18a:	89 bf       	out	0x39, r24	; 57
                TCCR1B = (1<<CS10)|(0<<CS11)|(0<<CS12); // Устанавливаем предделитель и разрешаем работу счетчика 
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	8e bd       	out	0x2e, r24	; 46
                TCNT1H = 0;
 190:	1d bc       	out	0x2d, r1	; 45
                TCNT1L = 0;                                            
 192:	1c bc       	out	0x2c, r1	; 44
 194:	08 c0       	rjmp	.+16     	; 0x1a6 <_Z11Chek_Buttonv+0x46>
            }
            else
            {   
                Step = 0;
 196:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Step+0x1>
 19a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <Step>
//                TIMSK = (0<<OCIE1A);
//                OCR1AH = 0xFF;
//                OCR1AL = 0xFF;
                
                TCCR1B = 0;   // Запрещаем работу счетчика
 19e:	1e bc       	out	0x2e, r1	; 46
                PORTB = 0; // Порт в 0
 1a0:	18 ba       	out	0x18, r1	; 24
                TCNT1H = 0;
 1a2:	1d bc       	out	0x2d, r1	; 45
                TCNT1L = 0;                 
 1a4:	1c bc       	out	0x2c, r1	; 44
            }
    }
    State = NewState;
 1a6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <NewState>
 1aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 1ae:	08 95       	ret

000001b0 <main>:

};*/

int main()
{
    DDRB=0xFF;//настраиваем OC1A на выход
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	87 bb       	out	0x17, r24	; 23
    PORTB=0x00;// Начальное значение
 1b4:	18 ba       	out	0x18, r1	; 24
}*/

// настройка таймера
void Init_TIMER1()
{
    TCCR1A = (1<<WGM12); // Определяем режим работы таймер СТС
 1b6:	88 e0       	ldi	r24, 0x08	; 8
 1b8:	8f bd       	out	0x2f, r24	; 47
int main()
{
    DDRB=0xFF;//настраиваем OC1A на выход
    PORTB=0x00;// Начальное значение
    Init_TIMER1(); 
    sei();//разрешаем прерывания глобально
 1ba:	78 94       	sei
    while(1)
    Chek_Button();
 1bc:	0e 94 b0 00 	call	0x160	; 0x160 <_Z11Chek_Buttonv>
    {
    }

};*/

int main()
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <main+0xc>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
